class ::<root> < ::Object ()
  class ::<Class:<root>>[<AttachedClass>] < ::<Class:Object> ()
    method ::<Class:<root>>#<static-init> (<blk>) @ test/testdata/infer/private_method_zsuper.rb:3
      argument <blk><block> @ Loc {file=test/testdata/infer/private_method_zsuper.rb start=??? end=???}
  class ::Child < ::Parent () @ test/testdata/infer/private_method_zsuper.rb:12
  class ::<Class:Child>[<AttachedClass>] < ::<Class:Parent> () @ test/testdata/infer/private_method_zsuper.rb:12
    type-member(+) ::<Class:Child>::<AttachedClass> -> T.attached_class (of Child) @ test/testdata/infer/private_method_zsuper.rb:12
    method ::<Class:Child>#<static-init> (<blk>) @ test/testdata/infer/private_method_zsuper.rb:12
      argument <blk><block> @ Loc {file=test/testdata/infer/private_method_zsuper.rb start=??? end=???}
    method ::<Class:Child>#foo : private|zsuper () @ test/testdata/infer/private_method_zsuper.rb:13
  class ::Parent < ::Object () @ test/testdata/infer/private_method_zsuper.rb:3
  class ::<Class:Parent>[<AttachedClass>] < ::<Class:Object> (Sig) @ test/testdata/infer/private_method_zsuper.rb:3
    type-member(+) ::<Class:Parent>::<AttachedClass> -> T.attached_class (of Parent) @ test/testdata/infer/private_method_zsuper.rb:3
    method ::<Class:Parent>#<static-init> (<blk>) @ test/testdata/infer/private_method_zsuper.rb:3
      argument <blk><block> @ Loc {file=test/testdata/infer/private_method_zsuper.rb start=??? end=???}
    method ::<Class:Parent>#foo (<blk>) -> Integer @ test/testdata/infer/private_method_zsuper.rb:7
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/infer/private_method_zsuper.rb start=??? end=???}

